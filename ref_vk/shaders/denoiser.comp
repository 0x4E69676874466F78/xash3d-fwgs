#version 460

#include "noise.glsl"
#include "tonemapping.glsl"
#include "color_spaces.glsl"

layout(local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16f) uniform image2D dest;

layout(set = 0, binding = 1, rgba8) uniform readonly image2D src_base_color;
layout(set = 0, binding = 2, rgba16f) uniform readonly image2D src_diffuse_gi;
layout(set = 0, binding = 3, rgba16f) uniform readonly image2D src_specular;
layout(set = 0, binding = 4, rgba16f) uniform readonly image2D src_additive;
layout(set = 0, binding = 5, rgba16f) uniform readonly image2D src_normals;

layout (constant_id = 0) const int hdr_output = 0;
// FIXME: Avoid tone mapping "fix-ups", ideally done in scene-referred space
// Need an operator that understands the output luminance and middle gray stays at a reasonable level (400 vs 1000 nit display on 0.5)
//layout (constant_id = 1) const float hdr_maxLuminance = 0;
//layout (constant_id = 2) const int hdr_auto_adjust = 1;
layout (constant_id = 3) const float hdr_manual_adjust_down = 3;
layout (constant_id = 4) const float hdr_manual_adjust_additive_down = 1.5;

float normpdf2(in float x2, in float sigma) { return 0.39894*exp(-0.5*x2/(sigma*sigma))/sigma; }
float normpdf(in float x, in float sigma) { return normpdf2(x*x, sigma); }

void readNormals(ivec2 uv, out vec3 geometry_normal, out vec3 shading_normal) {
	const vec4 n = imageLoad(src_normals, uv);
	geometry_normal = vec3(n.xy, sqrt(1. - n.x*n.x - n.y*n.y));
	shading_normal = vec3(n.zw, sqrt(1. - n.z*n.z - n.w*n.w));
}

void main() {
	ivec2 res = ivec2(imageSize(src_base_color));
	ivec2 pix = ivec2(gl_GlobalInvocationID);

	if (any(greaterThanEqual(pix, res))) {
		return;
	}

	const vec4 base_color = imageLoad(src_base_color, pix);
	const float material_index = imageLoad(src_diffuse_gi, pix).a;

	//imageStore(dest, pix, vec4(aces_tonemap(base_color.rgb), 0.)); return;
	//imageStore(dest, pix, vec4((base_color.rgb), 0.)); return;
	//imageStore(dest, pix, vec4(aces_tonemap(imageLoad(src_diffuse_gi, pix).rgb), 0.)); return;
	//imageStore(dest, pix, vec4(aces_tonemap(imageLoad(src_specular, pix).rgb), 0.)); return;

	vec3 geometry_normal, shading_normal;
	readNormals(pix, geometry_normal, shading_normal);

	//imageStore(dest, pix, vec4(.5 + geometry_normal * .5, 0.)); return;

	/* const uint mi = uint(material_index); */
	/* imageStore(dest, pix, vec4(rand3_f01(uvec3(mi,mi+1,mi+2)), 0.)); */
	/* return; */

	const int KERNEL_SIZE = 8;
	float total_scale = 0.;
	float specular_total_scale = 0.;
	vec3 colour = vec3(0.);
	vec3 speculour = vec3(0.);
	vec3 additivour = vec3(0.);
	for (int x = -KERNEL_SIZE; x <= KERNEL_SIZE; ++x)
		for (int y = -KERNEL_SIZE; y <= KERNEL_SIZE; ++y) {
			const ivec2 p = pix + ivec2(x, y);
			if (any(greaterThanEqual(p, res)) || any(lessThan(p, ivec2(0)))) {
				continue;
			}

			const vec4 c = imageLoad(src_diffuse_gi, p);
			if (c.a != material_index)
				continue;

			vec3 sample_geometry_normal, sample_shading_normal;
			readNormals(p, sample_geometry_normal, sample_shading_normal);

			// FIXME also filter by depth, (kusok index?), etc
			if ( dot(sample_geometry_normal, geometry_normal) < .99 )
				continue;

			// TODO bilaterally filter shading normals

			const float sigma = KERNEL_SIZE / 2.;
			const float scale = normpdf(x, sigma) * normpdf(y, sigma);
			colour += scale * imageLoad(src_diffuse_gi, p).rgb;
			total_scale += scale;

			const int SPECULAR_KERNEL_SIZE = 2;
			if (all(lessThan(abs(ivec2(x, y)), ivec2(SPECULAR_KERNEL_SIZE)))) {
				const float spigma = SPECULAR_KERNEL_SIZE / 2.;
				const float specuale = normpdf(x, spigma) * normpdf(y, spigma);
				speculour += specuale * imageLoad(src_specular, p).rgb;
				specular_total_scale += specuale;
			}
		}

	if (total_scale > 0.) {
		colour /= total_scale;
		colour *= base_color.rgb;
	}

	additivour = imageLoad(src_additive, pix).rgb;

	//#define TONEMAPPER aces_tonemap
	#define TONEMAPPER reinhard
	//#define TONEMAPPER TonemapMGS5
	//#define TONEMAPPER uncharted2Tonemap

	#ifdef TONEMAPPER
	if (hdr_output > 0) {
		colour = TONEMAPPER(colour) / hdr_manual_adjust_down;
		speculour = TONEMAPPER(speculour) / hdr_manual_adjust_down;
		additivour = TONEMAPPER(additivour) / hdr_manual_adjust_additive_down;
	}
	#endif

	if (specular_total_scale > 0.) {
		speculour /= specular_total_scale;
		//speculour *= base_color.rgb;
		colour += speculour;
	}

	//colour += imageLoad(src_specular, pix).rgb;
	colour += additivour;
	
	#ifdef TONEMAPPER
	if (hdr_output == 0) {
		colour = TONEMAPPER(colour);
		//colour = reinhard02(colour, vec3(1.0));
	}
	#endif
	colour = OECF_sRGB(colour); // gamma-correction

	imageStore(dest, pix, vec4(colour, 0.));
	//imageStore(dest, pix, imageLoad(src_diffuse_gi, pix));
}
