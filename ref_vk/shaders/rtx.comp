#version 460
#extension GL_EXT_ray_query : require

// FIXME shader specialization
layout(local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba8) uniform image2D image;
layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 2, set = 0) uniform UBO {
	mat4 inv_proj, inv_view;
} ubo;

//layout(binding = 2, set = 0) buffer Vertices { vec4 vertices[]; };

/*
layout (push_constant) uniform PC {
};
*/

void main() {
	vec2 res = imageSize(image);
	vec2 uv = (gl_GlobalInvocationID.xy + .5) / res * 2. - 1.;

	vec4 origin    = ubo.inv_view * vec4(0, 0, 0, 1);
	vec4 target    = ubo.inv_proj * vec4(uv.x, uv.y, 1, 1);
	vec4 direction = ubo.inv_view * vec4(normalize(target.xyz), 0);

	vec3 C = vec3(0.);
	vec3 O = origin.xyz, D=direction.xyz;

	const float L = 10000.;
	rayQueryEXT rayQuery;
	rayQueryInitializeEXT(rayQuery, tlas, gl_RayFlagsOpaqueEXT, 0xff, O, 0., D, L);
	while(rayQueryProceedEXT(rayQuery)) {}
	const float l = rayQueryGetIntersectionTEXT(rayQuery, true);
	if (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionTriangleEXT) {
		C = vec3(1., 0., 1.);
	} else {
		vec3 pos = O+D*l;
		C = fract(pos/100.);
	}

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(C, 1.));
}
