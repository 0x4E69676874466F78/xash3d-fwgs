#version 460 core

#extension GL_EXT_ray_tracing : require
// #extension GL_EXT_shader_8bit_storage : require

layout(binding = 0, set = 0, rgba8) uniform image2D image;
layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 2, set = 0) uniform UBO {
	mat4 inv_proj, inv_view;

	// TODO combine
	//int num_lights;
	//Light lights[];
} ubo;

layout(location = 0) rayPayloadEXT vec4 ray_result;

void main() {
	vec2 uv = (gl_LaunchIDEXT.xy + .5) / gl_LaunchSizeEXT.xy * 2. - 1.;

	vec4 origin    = ubo.inv_view * vec4(0, 0, 0, 1);
	vec4 target    = ubo.inv_proj * vec4(uv.x, uv.y, 1, 1);
	vec4 direction = ubo.inv_view * vec4(normalize(target.xyz), 0);

	//ray_result = vec4(0.);

	const uint sbt_offset = 0;
	const uint sbt_stride = 0;
	const uint miss_index = 0;
	const int ray_payload_loc = 0;
	const float L = 10000.;
	traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xff,
		sbt_offset, sbt_stride, miss_index,
		origin.rgb, .001, direction.rgb, L,
		ray_payload_loc);

	//imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(vec3(fract(uv.x * uv.y * 100.)), 1.)); return;
	//vec3 c = vec3(fract(gl_LaunchIDEXT.xy / 10.), 1.);

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), ray_result);//vec4(c, 1.));
}