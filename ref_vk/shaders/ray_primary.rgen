#version 460 core
#extension GL_GOOGLE_include_directive : require

#include "ray_primary_common.glsl"

layout(set = 0, binding = 0, rgba8) uniform image2D out_image_base_color_r;
layout(set = 0, binding = 1) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 2) uniform UBO {
	mat4 inv_proj, inv_view;
} ubo;

layout(location = PAYLOAD_LOCATION_PRIMARY) rayPayloadEXT RayPayloadPrimary payload;

void main() {
	vec2 uv = (gl_LaunchIDEXT.xy + .5) / gl_LaunchSizeEXT.xy * 2. - 1.;

	// FIXME start on a near plane
	vec3 origin    = (ubo.inv_view * vec4(0, 0, 0, 1)).xyz;
	vec4 target    = ubo.inv_proj * vec4(uv.x, uv.y, 1, 1);
	vec3 direction = (ubo.inv_view * vec4(normalize(target.xyz), 0)).xyz;

	const uint flags = gl_RayFlagsCullFrontFacingTrianglesEXT;
	const uint sbt_offset = 0;
	const uint sbt_stride = 0;
	const float L = 10000.; // TODO Why 10k?
	traceRayEXT(tlas, flags, GEOMETRY_BIT_OPAQUE, // | GEOMETRY_BIT_REFRACTIVE,
		sbt_offset, sbt_stride, SHADER_OFFSET_MISS_REGULAR,
		origin, 0., direction, L,
		PAYLOAD_LOCATION_PRIMARY);

	vec4 out_base_color_r = vec4(fract(payload.hit_t.xyz), 0.);

	imageStore(out_image_base_color_r, ivec2(gl_LaunchIDEXT.xy), out_base_color_r);
}
